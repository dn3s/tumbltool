#!/usr/bin/perl
#    TUMBLTOOL! Test and deploy Tumblr themes with ease!
#    Copyright (C) 2015 Devon Sawatzky.
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
use strict;
#use warnings;
use JSON;
use Getopt::Long;
use TumblTool::ThemeParser;
use TumblTool::Preview;
use TumblTool::Bundle;
use TumblTool::PathUtils;
use TumblTool::DataURI;
use TumblTool::Slurp;
use TumblTool::TextTransforms;
use TumblTool::Fail;
use TumblTool::ImageURL;
use TumblTool::TumblrButton;
use Data::Dumper;
my $command = shift(); #command comes first, not subject to Getopt stuff
#here are a couple chances to bail out before doing anything
fail("No command spefified!") if(!$command);
fail() if($command eq "help");
fail("Unknown command: \"$command\"\n") if(!($command=~/preview|bundle|dbg/));
#OK lets get started
my $content='default';
my $dataURI;
my $includes=[];
my $inline;
my $inlineCSS;
my $inlineJS;
my $inlineIMG;
my $tiny;
my $themeFile;
my $vars={};
my $minifyCSS;
my $minifyJS;
my $minifyHTML;
my $collapseHTML;
my $stripHTMLComments;
my $preserveConditionalComments;
my $pipe;
my $outFile;
GetOptions(
	"content|c=s"             => \$content,
	"data-uri|d"              => \$dataURI,
	"outfile|o=s"             => \$outFile,
	"include|i=s{1,}"         =>  $includes,
	"inline|l!"               => \$inline,
	"inline-css|lc!"          => \$inlineCSS,
	"inline-js|lj!"           => \$inlineJS,
	"inline-img|li!"          => \$inlineIMG,
	"minify-css|mc!"          => \$minifyCSS,
	"minify-js|mj!"           => \$minifyJS,
	"minify-html|mh!"         => \$minifyHTML,
	"collapse-html-lines|hl!" => \$collapseHTML,
	"strip-html-comments|hc!" => \$stripHTMLComments,
	"keep-ie-comments|ie!"    => \$preserveConditionalComments,
	"tiny|y!"                 => \$tiny,
	"var|v=s%"                => \$vars,
	"theme|t=s"               => \$themeFile,
	"pipe||p"                 => \$pipe,
) or fail();
#cascade CLI options
if(defined($pipe)) {
	setIfUnset(\$tiny,    $pipe);
	setIfUnset(\$inline,  $pipe);
	setIfUnset(\$dataURI, $pipe);
}
if(defined($tiny)) {
	setIfUnset(\$minifyCSS,  $tiny);
	setIfUnset(\$minifyJS,   $tiny);
	setIfUnset(\$minifyHTML, $tiny);
}
if(defined($minifyHTML)) {
	setIfUnset(\$collapseHTML, $minifyHTML);
	setIfUnset(\$stripHTMLComments, $minifyHTML);
	setIfUnset(\$preserveConditionalComments, !$minifyHTML);
}
if($dataURI) {#force everything inline; linking doesn't work in data URIs
	$inline=1;
	$inlineCSS=1;
	$inlineJS=1;
	$inlineIMG=1;
}
if(defined($inline)) {
	setIfUnset(\$inlineCSS, $inline);
	setIfUnset(\$inlineJS,  $inline);
	setIfUnset(\$inlineIMG, $inline);
}
#figure out output
#configure the modules according to CLI options
my $contentRoot=setContentName($content);
my $outputRoot=setOutputFile($outFile);
TumblTool::ImageURL::configure({"contentRoot"=>$contentRoot, "dataURI"=>$inlineIMG});
TumblTool::Include::configure({"collapseHTML"=>$collapseHTML,"includes"=>$includes, "inlineCSS"=>$inlineCSS, "inlineJS"=>$inlineJS, "minifyCSS"=>$minifyCSS, "minifyJS"=>$minifyJS});
TumblTool::TumblrButton::configure({"collapseHTML"=>$collapseHTML, "stripHTMLComments"=>$stripHTMLComments, "preserveConditionalComments"=>$preserveConditionalComments});
TumblTool::Preview::configure({"contentRoot"=>$contentRoot});
#parse theme, compress as needed
my $themeTxt=slurp($themeFile);
$themeTxt=collapseLines($themeTxt) if($collapseHTML);
$themeTxt=removeHTMLComments($themeTxt,$preserveConditionalComments) if($stripHTMLComments);
my $theme=parseTheme($themeTxt);
#run appropriate command
if($command eq "preview") {
	my $content=decode_json(slurp(getContentFile($content)));
	my $out=render($theme,$content);
	output("$out", $dataURI);
}
elsif($command eq "bundle") {
	my $out=(bundle($theme));
	output("$out");#no dataURI option here because why would you ever want that (ugh, that sounds like Apple)
}
elsif($command eq "dbg") {
	output(Dumper($theme));
}
exit(0);
sub setIfUnset
{
	(my $var, my $val)=@_;
	${$var}=${$var} // $val;
}
sub output
{
	(my $txt, my $dataURI)=@_;
	$txt=dataURI("text/html", $txt) if($dataURI);
	if($outFile) {
		open(my $fh, ">:encoding(UTF-8)", $outFile);
		select($fh);
	}
	print("$txt\n");
}
